link: https://leetcode.com/problems/car-fleet/description/

1. Create a vector containing pairs of integer and double. The int value will hold the position of the ith car and the double value will hold the time taken by the ith car to reach the destination.
	vector<pair<int, double>> car;
2. Iterate through the given vector to fill the above created vector values.
	2.1. Calculate the time taken by ith car to reach the destination using the formula:
		time = (target - position[i]) / speed[i];
	2.2. Insert the position and time value in the car vector.
		car.push_back({position[i], time});
3. Sort the car vector using the position value.
	sort(car.begin(), car.end());
4. Iterate through the sorted car vactor in reverse order
	4.1. Check if the current time value is greater than the previous maxTime. 
	     This means if the current car takes more time to reach the destination than the car in front of it, these cars will never meet before the destination and remain seperate fleets. 
	     If the current time is less than maxTime, this means that the cars will meet before the destination and the 2nd car would have to slow down and match the speed of the first car as it can't overtake.
		4.1.1. If TRUE update the maxTime value to current time and increment the number of fleets. 
5. Return the number of fleets.
