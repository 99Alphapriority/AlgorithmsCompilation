link: https://leetcode.com/problems/binary-tree-level-order-traversal/

1. Use Breadth First Search to solve this question.
2. Create a queue to store the address of a node.
	queue<TreeNode*> q;
3. Push the address of root node to the queue.
4. Run a WHILE loop until the loop is empty.
	4.1. Create a count integer to store the size of the queue. This will help us determine the number of elements at any
	     given level of the tree.
		int count = q.size();
	4.2. Create a vector to store the elements at any given level of the tree.
		vector<int> res;
	4.3. Run a FOR loop from i = 0 to i < count. This loop will be used to pop the elements from the queue corresponding to 
	     current tree level. And push the children of the popped node.
		4.3.1. Create a node pointer such that:
			TreeNode* node = q.front();
		4.3.2. Push the value of this node into the res vector.
			res.push_back(node->val);
		4.3.3. Pop this node from the queue.
			q.pop();
		4.3.4. Check if the left child of this node exists.
			4.3.4.1. If TRUE, push that node to the queue.
				q.push(node->left);
		4.3.5. Check if the right child of this node exists.
			4.3.5.1. If TRUE, push that node to the queue.
				1.push(node->right);
	4.4. Push the res vector to the ans vector.
5. Return the ans vector.
